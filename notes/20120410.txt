Notes for Apr 10 Meeting

A Laboratory For Teaching Object-Oriented Thinking
Kent Beck, Apple Computer, Inc.
Ward Cunningham, Wyatt Software Services, Inc.

http://c2.com/doc/oopsla89/paper.html

OOPSLA Oct. 1989

CRC Cards
  Characterize objects by...
    - Class name
    - Responsibilities
    - Collaborators

"...give up the global knowledge of control...Novice designs are littered with regressions to global thinking: global variables, unnecessary pointers, ..."
  /* hmmm...IoC...I'm looking at you */

"The Class Name of an object creates a vocabulary for discussing a design"

"Responsibilities identify the problems to be solved"
  "The responsibilities of an object are expressed by a handful of short verb phrases, each containing an active verb"

"...Collaborators objects which will send or be sent messages in the course of satisfying responsibilities"
  "No Object is an Island"
  /* "Collaboration is not necessarily a symetric relationship...", I thought this an astute observation */

CRC cards
  /* Portability and System Independence are properties...I found this funny, for some reason. */

"...design of the cards tends to progress from knows to unknowns..."

"Ragu Raghavan has said that in the switch to objects strong programmers become stronger, but weaker programmers are left behind."
  /* Hmm.  There's something about this statement that bugs me, but I can't put my finger on it.  Are we sure the "weak" are "weak", or would they rather be Functional? */

/* I love the observation the author makes that the physical cards make the people involved in the process more invested in it somehow */



Programming as an Experience:  The Inspiration for Self
Randall B. Smith
David Ungar

1995
ECOOP '95 Proceedings of the 9th European Conference on Object-Oriented Programming

Self attempts to integrate intellectual and non-intellectual apsects of programming to create an overall experience

"Language semantics embed a programmer in a uniform world of simple objects that can be modified without appealing to definitions of abstractions"
  /* What does this mean? */

My Self installation to cheetah is off to a rocky start, the /usr/bin file was not created and the /Libary/Self directory has permissions set that don't allow me to easily see its content.  Methinks they already went overly abstract.

"...the Self programmer lives and acts in a consistent and malleable world of objects."

Prototype model:
  "...just as a button can be added to any graphical object, so can a method be added to any individual object in the language, without needing to refer to a class"

Self began at PARC, then Stanford, and most recently Sun.

Objects consist of Slots
  A Slot has a Name and a Value
    Slot Names are always Strings
    Slot Values can be any Object
  A Slot marked with an asterix is a Parent

  When sending a message, if no Slot Name matches within the recieving Object, its Parent's Slots are searched.

In Self, any object can be regarded as a method; a "data" object contains code that merely returns itself.

/* Uh, oh.  They are losing me at "assignment".  Page 3, Para 2 */

"...sought to unifiy assignment and computation...assignment slots..."
  "x:" and "y:" are assignment slots
  assignment slots contain a specialized method symbolized by the arrow 
    x:->10 /* Maybe? */

  "...experience and manipulation are intertwined; we best experience an object  when we can touch it, pick it up, turn it over, push its buttons"

  "any object may pretend to be a container while employing a different implementation" /* What? */

  "...the design of slots in Self has proven challenging because of the unified access to state and behavior"
    "...this behavior of method objects means that they cannot be directly manipulated because they would run"
      /* Functions are first-class objects? */

    Mirrors are a method if indirectly mentioning methods without running them
    Mirrors are "...encapsulators of reflective operation"

  "A Self assignment slot is a slot containing a special primitive...which uses the name of the slot to find a corresponding data slot in the same object.


Type Declarations:
  "Self therefore distinguishes between concrete and abstract types"
    Concrete types (embodied by maps)
      - completely hidden from the Self programmer
      - available only to the implementation

    Abstract types
      - visible to the Self programmer

"We now believe that when features, rules, or elaborations are motivated by particular examples, it is a good bet that their addition will be a mistake."

"Consistency and malleability.  When there is only one way of doing things, it is easier to modify and reuse code."
  /* Scala deviates from this, no? */

"Consistency leads to reuse, reuse leads to conciseness, conciseness leads to understanding.  That is why we feel that it is hard to justify any type system that impedes reusability; the resultant duplication leads to a bigger program that is then harder to understand and to get right. Such type systems can be self-defeating."

"In Self, a change to a prototype (such as a new slot) will not affect anything other than the prototype itself (and its subsequent direct copies).  So we have implemented a "copy-down" mechanism in the environment to share implementation information."
  /* Interesting */
  "...some functionality omitted from the language may go back into the environment."
    This leads to some complexity, there are now two interfaces for adding slots to objects
      1. Language Level
      2. Copy-down Object Level

"When investigating a new language, your old habits can lead you astray."


3.  The User Interface and Programming Environment

Self is "pure object-oriented language, because it uses objects and messages to achieve the effects of flow control, variable scoping, and primitive data types"
  /* How can it have "primitive data-types" if it is pure object-oriented? */

  Structural Reification and Live Editing

  define: Reify - Verb - Make (something abstract) more concrete or real

3.1:  Structural Reification
  Fundamental display object in Self is the "Morph"
    - Greek for Thing
    - Prototype Systems usually provide generic examples of abstractions
      /* I like this */
    - "This is an important part of Structural Reification:  there are no invisible display objects"
  Submorph layout is strictly Row:Column

3.2:  Live Editing
  Live Editing simply means that any object can be directly changed by the user at any time
  "meta menu" pops-up on 3rd mouse button event over any morph that is pointed to

  /* "Outliner" sounds like an old-school Properties sheet to me. */

/* I do think it is interesting how any slot can be either a method or just data (rawColor example, P14/23) */

/* The user has to manually propogate the new rawColor method to all the existing atoms or only has to do this once, to the parent? Figure 10 */

/* I like the live-editing aspect of it.  It does feel "natural" (even though I'm not actaully running it). */


3.4 Issues

Only one outliner at a time!?!  Bummer.

/* AHHH!  I don't get the whole "Text and Object" stuff */


3.5 Summary

  Structural Reification - assures that the graphical relationships at play in a particular arrangement of submorphs is namifest directly in display objects on the screen
  Live Editing - there is no "edit" and "run" modes.  Objects are always available for immediate and direct editing


4.  Implementation

Self has 2 compilers; one for speed, one for optimization.
  /* Isn't this JIT? */

Methods get "instrumented" and invocations are counted
  /* weighted by time spent in the method or just raw invocation count? */

"...and force him to consider the difference between the program as written and what really runs"
  /* Interesting insight */

"...in order to debug her program"
  /* Sexist...only the chicks have bugs in their programs? */

"...Implementation as deception..."
  /* I think this view is the most interesting of the entire paper */

/* Didn't wholly get the "even the if object can be overridden" commentary in 4.3 */

